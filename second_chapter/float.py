#Напишите функцию to_float(num), которая преобразует любое число в число с плавающей точкой.
#Если в качестве аргумента передан другой тип данных, она возвращает «Невозможно преобразовать».
def to_float(num):
    if isinstance(num, (int, float)):
        return float(num)
    return "Невозможно преобразовать"

#Дано 4 числа.
#Нужно написать функцию avg_5(a, b, c, d),
#которая возвращает среднее арифметическое аргументов и округляет его до 5 знаков после запятой.
def avg(a, b, c, d):
    return float(round((a + b + c + d) / 4, 5))

#Функция mul_to_int(a, b) может принимать целые или вещественные числа.
#Если результат умножения аргументов не имеет значимых чисел после запятой, то она возвращает его в виде целого числа.
#В противном случае – в виде float.

def mul_to_int(a, b):
    c = a * b
    if float(c).is_integer():
        return int(c)
    return float(c)

# Напишите функцию округления round_standard(num), принимающую число с плавающей точкой и округляющую
# его до целого числа в соответствии с правилами школьной математики.

def round_standard(num):
    if num >= 0:
        sign = 1
    else:
        sign = -1
    return sign * int(abs(num) + 0.5)

#Так как в Python операции с вещественными числами могут давать неожиданные результаты (в частности, 0.1 + 0.2 не будет в точности равняться 0.3), стоит задача с этим как-то справляться.
#Требуется написать функцию eqv(a, b, c), которая принимает 3 числа.
#Числа a и b складываются.
#Затем эта сумма сравнивается с числом “с” с определенной степенью точности.
#Точность равняется 0.01 % от большего из чисел a и b.
#Функция вернет True, если выполняется равенство, иначе False

def eqv(a, b, c):
    sum = a + b
    value = 0.01 * max(abs(a), abs(b)) / 100
    if abs(sum - c) >= value:
        return False
    return True
